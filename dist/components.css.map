{
  "version": 3,
  "file": "components.css",
  "sources": [
    "../HelloWorld.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import QRCode from \"qrcode\";\n  let text = \"\";\n  let url = \"\";\n  let option = { type: \"svg\" };\n\n  const debounce = (fn, time) => {\n    let timeout;\n\n    return function() {\n      const functionCall = () => fn.apply(this, arguments);\n      clearTimeout(timeout);\n      timeout = setTimeout(functionCall, time);\n    };\n  };\n\n  const getDataURLFromSVG = svg =>\n    \"data:image/svg+xml,\" + encodeURIComponent(svg);\n\n  const textToDataUrl = async (source, opt) =>\n    opt && opt.type === \"svg\"\n      ? getDataURLFromSVG(await QRCode.toString(source, opt))\n      : await QRCode.toDataURL(source, opt);\n\n  $: debounce(async () => {\n    url = text ? await textToDataUrl(text, option) : \"\";\n  }, 500)();\n</script>\n\n<style lang=\"css\">.qrframe{width:12em;height:12em}input{border:1px solid}.contents{margin:1em}\n/*# sourceMappingURL=src/components/HelloWorld.svelte.map */</style>\n\n<div class=\"contents\">\n  <h1>QRCode generater</h1>\n  <div>\n    <div>\n      <input bind:value={text} />\n    </div>\n    {#if url}\n      <div class=\"qrframe\">\n        <img alt={text} src={url} />\n      </div>\n    {/if}\n  </div>\n</div>\n"
  ],
  "names": [],
  "mappings": "AA6BkB,uBAAQ,CAAC,MAAM,IAAI,CAAC,OAAO,IAAI,CAAC,oBAAK,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,wBAAS,CAAC,OAAO,GAAG,CAAC"
}