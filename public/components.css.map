{
  "version": 3,
  "file": "components.css",
  "sources": [
    "../Tabpager.svelte",
    "../QRMaker.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n  import { crossfade } from \"svelte/transition\";\n  export let options;\n  export let value;\n\n  const dispatch = createEventDispatcher();\n\n  const isObject = obj =>\n    Object.prototype.toString.call(obj) === \"[object Object]\";\n\n  let dictOptions = [];\n  let _value;\n\n  function onChange(event) {\n    value = event.srcElement.value;\n    dispatch(\"change\", {\n      ...event,\n      srcElement: event.srcElement,\n      value: event.srcElement.value\n    });\n  }\n\n  const [send, receive] = crossfade({\n    duration: 300,\n    fallback: \"scale\"\n  });\n\n  $: {\n    if (Array.isArray(options)) {\n      dictOptions = options.map(value =>\n        isObject(value) ? { ...value } : { value, label: value }\n      );\n    } else if (isObject(options)) {\n      dictOptions = Object.entries(options).map(([key, value]) => ({\n        value: key,\n        label: value\n      }));\n    }\n    _value = value.toString();\n    console.log(\"value:\" + value);\n  }\n</script>\n\n<style>.tabmenu{position:relative;width:100%;display:flex;justify-content:space-around;margin:1rem 0}.tabmenu input[type=radio]{display:none}.tabmenu label{width:100%;display:block;flex-grow:1}.tabmenu input[type=radio]+.label{position:relative;width:100%;display:block;padding:.5rem 0 .2rem;color:#000;border-bottom:.1rem solid;border-color:#ddd;text-align:center;cursor:pointer}.tabmenu input[type=radio]:checked+.label{color:#0ae}.active_tab{width:100%;height:.3rem;background-color:#0ae;position:absolute;bottom:-.1rem}\n/*# sourceMappingURL=src/components/Tabpager.svelte.map */</style>\n\n<div class=\"tabmenu {$$props.class}\">\n  {#each dictOptions as item}\n    <label>\n      <input\n        type=\"radio\"\n        bind:group={_value}\n        value={item.value}\n        on:change={event => onChange(event)} />\n      <div class=\"label\">\n        {item.label}\n        {#if _value == item.value}\n          <div\n            class=\"active_tab\"\n            in:receive={{ key: 'tabmarker' }}\n            out:send={{ key: 'tabmarker' }} />\n        {/if}\n      </div>\n    </label>\n  {/each}\n</div>\n",
    "<script>\n  import QRSvg from \"qrcode-svg\";\n  let text = \"\";\n  let option = { type: \"svg\" };\n  let color = \"#000000\";\n  let background = \"#ffffff\";\n  let ecl = \"M\";\n  let urlSvg = blankRectangleSVG(background);\n  const API_BASE = \"./api/\";\n\n  const debounce = (fn, time) => {\n    let timeout;\n\n    return function() {\n      const functionCall = () => fn.apply(this, arguments);\n      clearTimeout(timeout);\n      timeout = setTimeout(functionCall, time);\n    };\n  };\n\n  function getDataURLFromSVG(svg) {\n    return `data:image/svg+xml,${encodeURIComponent(svg)}`;\n  }\n\n  function blankRectangleSVG(color = \"#ffffff\", size = 100) {\n    return getDataURLFromSVG(`<?xml version=\"1.0\" standalone=\"yes\"?>\n    <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"${size}\" height=\"${size}\">\n    <rect x=\"0\" y=\"0\" width=\"${size}\" height=\"${size}\"  style=\"fill:${color};\" />\n    </svg>`);\n  }\n\n  const textToDataUrlSvg = (source, opt) => {\n    return getDataURLFromSVG(\n      new QRSvg({\n        ...opt,\n        content: source,\n        join: true,\n        container: \"svg-viewbox\"\n      }).svg()\n    );\n  };\n\n  $: debounce(async () => {\n    urlSvg = text\n      ? textToDataUrlSvg(text, { color, background, ecl })\n      : blankRectangleSVG(background);\n  }, 500)();\n</script>\n\n<style lang=\"css\">.download{display:block;margin:1rem 0}\n/*# sourceMappingURL=src/components/QRMaker.svelte.map */</style>\n\n<div>\n  <div>\n    <input\n      bind:value={text}\n      placeholder=\"input url or text\"\n      class=\"shadow appearance-none border rounded w-full py-2 px-3\n      text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" />\n  </div>\n  <div class=\"qrframe border rounded w-full h-auto sm:w-64 sm:h-64 my-4\">\n    {#if urlSvg}\n      <img class=\"qrcode w-full h-full\" alt={text} title={text} src={urlSvg} />\n    {/if}\n  </div>\n  {#if text}\n    <div>\n      <a\n        class=\"download\"\n        download=\"qrcode.png\"\n        href={API_BASE + 'makeqrpng.js?target=' + text}>\n        Download PNG\n      </a>\n      <a\n        class=\"download\"\n        download=\"qrcode.svg\"\n        href={API_BASE + 'makeqrsvg.js?target=' + text}>\n        Download SVG\n      </a>\n    </div>\n  {/if}\n</div>\n"
  ],
  "names": [],
  "mappings": "AA4CO,sCAAQ,CAAC,SAAS,QAAQ,CAAC,MAAM,IAAI,CAAC,QAAQ,IAAI,CAAC,gBAAgB,YAAY,CAAC,OAAO,IAAI,CAAC,CAAC,CAAC,uBAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,gBAAC,CAAC,QAAQ,IAAI,CAAC,uBAAQ,CAAC,oBAAK,CAAC,MAAM,IAAI,CAAC,QAAQ,KAAK,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,oCAAM,CAAC,SAAS,QAAQ,CAAC,MAAM,IAAI,CAAC,QAAQ,KAAK,CAAC,QAAQ,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,cAAc,KAAK,CAAC,KAAK,CAAC,aAAa,IAAI,CAAC,WAAW,MAAM,CAAC,OAAO,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,oCAAM,CAAC,MAAM,IAAI,CAAC,yCAAW,CAAC,MAAM,IAAI,CAAC,OAAO,KAAK,CAAC,iBAAiB,IAAI,CAAC,SAAS,QAAQ,CAAC,OAAO,MAAM,CAAC;ACKzf,uBAAS,CAAC,QAAQ,KAAK,CAAC,OAAO,IAAI,CAAC,CAAC,CAAC"
}